{"version":3,"file":"static/js/757.91e2e374.chunk.js","mappings":"+NAIO,SAASA,IACd,IAAMC,GAAaC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAV,IAC9BC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,mBAAOC,UAAU,QAAjB,mCAEE,kBACEA,UAAU,QACVC,KAAK,OACLC,KAAK,SACLC,SAZoB,SAAAC,GACxB,IAAQC,EAAUD,EAAME,cAAhBD,MACRP,GAASD,EAAAA,EAAAA,IAAOQ,GACjB,EAUKA,MAAOX,MAId,C,0CCjBM,SAASa,IACd,IAAMT,GAAWC,EAAAA,EAAAA,MACXS,GAAkBb,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMa,SAASC,KAAnB,IACnCC,GAAgBhB,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAV,IACjCe,EAAkBJ,EAAgBX,QAAO,SAAAgB,GAAO,OACpDA,EAAQX,KAAKY,cAAcC,SAASJ,EAAcG,cADE,IAJ1B,wCAQ5B,WAAiCE,GAAjC,iFACQlB,GAASmB,EAAAA,EAAAA,IAAcD,IAD/B,OAEElB,GAASoB,EAAAA,EAAAA,OAFX,4CAR4B,sBAa5B,OACE,eAAIlB,UAAU,OAAd,SACGY,EAAgBO,KAAI,SAAAN,GACnB,OACE,gBAAIb,UAAU,OAAd,WACE,eAAGA,UAAU,UAAb,UACGa,EAAQX,KADX,KACmBW,EAAQO,UAE3B,mBACEpB,UAAU,eACVqB,QAAS,kBAvBO,2CAuBDC,CAAkBT,EAAQG,GAAhC,EAFX,sBAJwBH,EAAQG,GAYrC,KAGN,C,wBC/BYO,EAAc,WACzB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOtB,EAAP,KAAauB,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KAEM7B,GAAWC,EAAAA,EAAAA,MAEX6B,GADkBjC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMa,SAASC,KAAnB,IACDmB,MAAK,SAAAhB,GAC3C,OAAOA,EAAQX,KAAKa,SAASb,EAC9B,IAEK4B,EAAoB,SAAA1B,GACxB,MAAwBA,EAAME,cAAtBJ,EAAR,EAAQA,KAAMG,EAAd,EAAcA,MACd,OAAQH,GACN,IAAK,OACHuB,EAAQpB,GACR,MACF,IAAK,SACHsB,EAAUtB,GACV,MACF,QACE0B,QAAQC,IAAI,mBAGjB,EAEKC,EAAQ,mCAAG,WAAM7B,GAAN,oEACfA,EAAM8B,kBACFN,EAFW,uBAGbO,MAAM,GAAD,OAAIP,EAAgB1B,KAApB,4BAHQ,0CAMTJ,GAASsC,EAAAA,EAAAA,IAAW,CAAClC,KAAAA,EAAMwB,OAAAA,KANlB,OAOf5B,GAASoB,EAAAA,EAAAA,OACTmB,IARe,2CAAH,sDAWRA,EAAQ,WACZZ,EAAQ,IACRE,EAAU,GACX,EAED,OACI,kBAAM3B,UAAU,OAAOsC,SAAUL,EAAjC,WACE,mBAAOjC,UAAU,QAAjB,kBAEE,kBACEA,UAAU,QACVG,SAAU2B,EACVzB,MAAOH,EACPD,KAAK,OACLC,KAAK,OACLqC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBAAOzC,UAAU,QAAjB,oBAEE,kBACEA,UAAU,QACVG,SAAU2B,EACVzB,MAAOqB,EACPzB,KAAK,MACLC,KAAK,SACLqC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQzC,UAAU,eAAeC,KAAK,SAAtC,2BAKP,ECzEc,SAASyC,IAEtB,OACE,iCACE,SAACC,EAAA,EAAD,WACE,gDAEF,SAAC,EAAD,KACA,SAAC,EAAD,KACA,SAAC,EAAD,MAGL,C","sources":["components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/pages/Contacts.jsx"],"sourcesContent":["import '../Filter/Filter.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filter } from '../redux/contacts/slice';\n\nexport function Filter() {\n  const inputValue = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n  const handleFilterInput = event => {\n    const { value } = event.currentTarget;\n    dispatch(filter(value));\n  };\n\n  return (\n    <label className=\"label\">\n      Find contacts by name\n      <input\n        className=\"input\"\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleFilterInput}\n        value={inputValue}\n      ></input>\n    </label>\n  );\n}\n","import '../ContactList/ContactList.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  deleteContact,\n  fetchContacts,\n} from '../redux/contacts/contactsOperations';\n\nexport function ContactList() {\n  const dispatch = useDispatch();\n  const arrayOfContacts = useSelector(state => state.contacts.items);\n  const valueOfFilter = useSelector(state => state.filter);\n  const visibleContacts = arrayOfContacts.filter(contact =>\n    contact.name.toLowerCase().includes(valueOfFilter.toLowerCase())\n  );\n\n  async function deleteContactById(id) {\n    await dispatch(deleteContact(id));\n    dispatch(fetchContacts());\n  }\n\n  return (\n    <ul className=\"list\">\n      {visibleContacts.map(contact => {\n        return (\n          <li className=\"item\" key={contact.id}>\n            <p className=\"contact\">\n              {contact.name}: {contact.phone}\n            </p>\n            <button\n              className=\"deleteButton\"\n              onClick={() => deleteContactById(contact.id)}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport '../ContactForm/ContactForm.css';\nimport {\n  addContact,\n  fetchContacts,\n} from '../redux/contacts/contactsOperations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const arrayOfContacts = useSelector(state => state.contacts.items);\n  const findRepeateName = arrayOfContacts.find(contact => {\n    return contact.name.includes(name);\n  });\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        console.log('Something wrong');\n        break;\n    }\n  };\n\n  const sendData = async event => {\n    event.preventDefault();\n    if (findRepeateName) {\n      alert(`${findRepeateName.name} is already in contacts`);\n      return;\n    }\n    await dispatch(addContact({name, number}));\n    dispatch(fetchContacts());\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n      <form className=\"form\" onSubmit={sendData}>\n        <label className=\"label\">\n          Name\n          <input\n            className=\"input\"\n            onChange={handleInputChange}\n            value={name}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label className=\"label\">\n          Number\n          <input\n            className=\"input\"\n            onChange={handleInputChange}\n            value={number}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button className=\"submitButton\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n  );\n};\n","// import { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n// import { fetchTasks } from 'redux/tasks/operations';\n// import { selectLoading } from 'redux/tasks/selectors';\nimport { Filter } from '../Filter/Filter';\nimport { ContactList } from '../ContactList/ContactList';\nimport { ContactForm } from '../ContactForm/ContactForm';\n\nexport default function Contacts() {\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm></ContactForm>\n      <Filter></Filter>\n      <ContactList></ContactList>\n    </>\n  );\n}\n"],"names":["Filter","inputValue","useSelector","state","filter","dispatch","useDispatch","className","type","name","onChange","event","value","currentTarget","ContactList","arrayOfContacts","contacts","items","valueOfFilter","visibleContacts","contact","toLowerCase","includes","id","deleteContact","fetchContacts","map","phone","onClick","deleteContactById","ContactForm","useState","setName","number","setNumber","findRepeateName","find","handleInputChange","console","log","sendData","preventDefault","alert","addContact","reset","onSubmit","pattern","title","required","Contacts","Helmet"],"sourceRoot":""}